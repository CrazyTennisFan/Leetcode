Implement an iterator to flatten a 2d vector.

For example,
Given 2d vector =

[
  [1,2],
  [3],
  [4,5,6]
]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,2,3,4,5,6].

Follow up:
As an added challenge, try to code it using only iterators in C++ or iterators in Java.



------------------------------------------------------------------------------------------------------


public class Vector2D implements Iterator<Integer> {
    
    Iterator<List<Integer>> vecIter;
    Iterator<Integer> iter;

    public Vector2D(List<List<Integer>> vec2d) {
        
        if (vec2d!=null)
        {
            vecIter = vec2d.iterator();
            while (vecIter.hasNext())
            {
                List<Integer> l = vecIter.next();
                if(l.size()>0)
                {
                    iter = l.iterator();
                    break;
                }
            }
                
        }
        

    }

    @Override
    public Integer next() {
        int v = iter.next();
        if (!iter.hasNext())
        {
            while (vecIter.hasNext())
            {
                List<Integer> l = vecIter.next();
                if(l.size()>0)
                {
                    iter = l.iterator();
                    break;
                }
            }
        }
        
            
        return v;
    }

    @Override
    public boolean hasNext() {
        if (iter == null)  return false;
        return iter.hasNext();
    }
}

/**
 * Your Vector2D object will be instantiated and called as such:
 * Vector2D i = new Vector2D(vec2d);
 * while (i.hasNext()) v[f()] = i.next();
 */