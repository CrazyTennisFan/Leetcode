Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.

Example 1:
Input: [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number; 
The second 1's next greater number needs to search circularly, which is also 2.
Note: The length of given array won't exceed 10000.


-------------------------------------------------------------------------------------------------------

My solution:

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        Stack<Integer> stack = new Stack();
        Stack<Integer> s = new Stack();
        HashMap<Integer, Integer> map = new HashMap();
        int index = 0;
        int cnt = 0;
        int limit = nums.length * 2 - 1;
        int[] res = new int[nums.length];
        
        while(cnt < limit)
        {
            while(!stack.isEmpty() && nums[cnt%nums.length] > stack.peek())
            {
                stack.pop();
                res[s.pop()] = nums[cnt%nums.length];
            }
            
            if (index < nums.length)
            {
                 stack.push(nums[index]);
                 s.push(index);
                 index++;
            }   
            
            cnt++;            
        }
        
        while(!stack.isEmpty())
        {
            stack.pop();
            res[s.pop()] = -1;
        }
        
        
        return res;
        
    }
}




One stack solution:


public class Solution {

    public int[] nextGreaterElements(int[] nums) {
        int[] res = new int[nums.length];
        Stack<Integer> stack = new Stack<>();
        for (int i = 2 * nums.length - 1; i >= 0; --i) {
            while (!stack.empty() && nums[stack.peek()] <= nums[i % nums.length]) {
                stack.pop();
            }
            res[i % nums.length] = stack.empty() ? -1 : nums[stack.peek()];
            stack.push(i % nums.length);
        }
        return res;
    }
}



Complexity Analysis

Time complexity : O(n). Only two traversals of the numsnums array are done. Further, atmost \text{2n}2n elements are pushed and popped from the stack.

Space complexity : O(n). A stack of size nn is used. resres array of size nn is used.

