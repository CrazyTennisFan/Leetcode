Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, return -1.

For example, with A = "abcd" and B = "cdabcdab".

Return 3, because by repeating A three times (¡°abcdabcdabcd¡±), B is a substring of it; and B is not a substring of A repeated two times ("abcdabcd").

Note:
The length of A and B will be between 1 and 10000.


---------------------------------------------------------------------------------------


class Solution {
    public int repeatedStringMatch(String A, String B) {
        if(A ==null || A.length() == 0)
        {
            if(B == null || B.length() == 0) return 1;
            else return -1;
        }
                
        int cnt = 1;
        int len = B.length();
        
        StringBuilder sb = new StringBuilder();
        sb.append(A);
        while(sb.toString().length() < len)
        {
            sb.append(A);
            cnt++;
        }
        
        if(sb.toString().indexOf(B) >= 0)  return cnt;
        if(sb.append(A).toString().indexOf(B) >= 0)  return cnt+1;
        
        return -1;
                
    }
}