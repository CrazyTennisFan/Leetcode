Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]




---------------------------------------------------------------------------------------------------------




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new ArrayList();
        if (root == null)  return res;
        
        LinkedList<TreeNode> queue = new LinkedList();
        queue.add(root);
        int size = 1;
        while(!queue.isEmpty())
        {
            int num = size;
            size = 0;
            List<Integer> l = new ArrayList();
            
            for(int i = 0; i < num; i++)
            {
                TreeNode node = queue.poll();
                if (node.left != null)
                {
                    queue.add(node.left);
                    size++;
                }
                if (node.right != null)
                {
                    queue.add(node.right);
                    size++;
                }
                l.add(node.val);
            }
            
            res.add(0,l);
        }        
        
        return res;
    }
}