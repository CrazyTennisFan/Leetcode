Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1


--------------------------------------------------------------------------------------------------

class Solution {
    public int strStr(String haystack, String needle) {
       
        if(haystack == null || needle == null)
            return -1;
        
        int len1 = haystack.length();
        int len2 = needle.length();
        
        for(int i=0; i <= len1 - len2;i++)
        {            
            for(int j = 0;; j++)
            {
                if(j == len2)
                {
                    return i;
                }
                else if(haystack.charAt(i+j) != needle.charAt(j))
                    break;
                
            }
        }
        
        return -1;
        
    }
}


----------------------------------------------------------------------------------------------------

Rabin Karp: 


class Solution {
    public int strStr(String haystack, String needle) {
       
        if(haystack == null || needle == null)
            return -1;
        
        int base = 1000000;
        int targetCode = 0;
        int targetLen = needle.length();
        
        if (targetLen == 0)
            return 0;
        
        for(int i = 0; i < targetLen; i++)
        {
            targetCode = (targetCode * 31 + needle.charAt(i)) % base;
        }
        
        int power = 1;
        for(int i = 0; i < targetLen; i++)
        {
            power = (power * 31) % base;
        }
        
        int sourceCode = 0;
        for(int i = 0; i < haystack.length(); i++)
        {
            sourceCode = (sourceCode * 31 + haystack.charAt(i)) % base;            
            if(i < targetLen -1){
                continue;
            }
            
            if(i >= targetLen){
                sourceCode =  sourceCode - (haystack.charAt(i-targetLen) * power) % base;
                if (sourceCode < 0)
                    sourceCode += base;
            }
            
            if ((sourceCode == targetCode) && haystack.substring(i-targetLen+1, i + 1).equals(needle))
                return i-targetLen+1;
        }
        
        
        return -1;
        
    }
}