You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.



==============================================================================================================



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        else if (l2 == null)  return l1;
        
        int carry = 0;
        ListNode dummy = new ListNode(0);
        ListNode t = dummy;
        while(l1 != null || l2 != null)
        {
            int v1 = l1!=null?l1.val:0;
            int v2 = l2!=null?l2.val:0;
            ListNode node = new ListNode((v1+v2+carry)%10);
            t.next = node;
            carry = (v1 + v2 + carry)/10;
            l1 = l1!=null?l1.next:null;
            l2 = l2!=null?l2.next:null;
            t = t.next;
        }
        
        if (carry == 1)
        {
            ListNode node = new ListNode(1);
            t.next = node;
        }
        
        return dummy.next;
    }
}