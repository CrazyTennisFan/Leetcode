Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]



---------------------------------------------------------------------------------------


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList();
        List<Integer> path = new ArrayList();
        getPath(root, sum, path, res);
        
        return res;
    }
    
    private void getPath(TreeNode node, int sum, List<Integer> path, List<List<Integer>> res)
    {
        if(node == null)  return;
        path.add(node.val);
        
        if(node.left==null && node.right==null && node.val == sum)
        {
            res.add(new ArrayList<Integer>(path));
            return;
        }
        if(node.left!=null)
        {
            getPath(node.left, sum-node.val, path, res);
            path.remove(path.size()-1);
        }
        if(node.right!=null)
        {
            getPath(node.right, sum-node.val, path, res);
            path.remove(path.size()-1);
        }
        
        
    }
}