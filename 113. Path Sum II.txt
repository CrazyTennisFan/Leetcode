Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]



---------------------------------------------------------------------------------------


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList();
        
        if (root == null)   return res;
        
        res = getResult(root, sum);
        return res;
    }
    
    public List<List<Integer>> getResult(TreeNode node,int sum)
    {
        List<List<Integer>> ans = new ArrayList();
        
        if (node.left == null && node.right == null && node.val == sum)
        {
            List<Integer>  l = new ArrayList();
            l.add(node.val);
                        
            ans.add(l);
            return ans;
        }
        else if(node.left == null && node.right == null && node.val != sum)
        {
            return ans;
        }
        
        List<List<Integer>> left = null;
        
        if(node.left != null){
            left = getResult(node.left,sum-node.val);
        }
        
        List<List<Integer>> right = null;
        
        if(node.right != null){
            right = getResult(node.right,sum-node.val);
        }
        
        
        if (left !=null && left.size() > 0)
        {
            for(List<Integer> l:left)
            {
                l.add(0, node.val);
                ans.add(l);
            }
        }
        if (right != null && right.size() > 0)
        {
            for(List<Integer> l:right)
            {
                l.add(0, node.val);
                ans.add(l);
            }
        }
        
        return ans;
        
    }
}