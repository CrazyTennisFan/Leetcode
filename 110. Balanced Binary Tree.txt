Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.


-------------------------------------------------------------------------------------------


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        if (root == null)  return true;
        
        if (getDepth(root) == -1)
            return false;
        
        return true;
        
    }
    
    public int getDepth(TreeNode node)
    {
        if (node == null)
        {
            return 0;
        }
        
        int leftHeight = getDepth(node.left);
        if(leftHeight == -1)  return -1;
        
        int rightHeight = getDepth(node.right);
        if(rightHeight == -1)  return -1;
                
        
        if(Math.abs(leftHeight-rightHeight) <= 1)
            return Math.max(leftHeight, rightHeight)+1;
        else
            return -1;
      
    }
}