Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


----------------------------------------------------------------------------------------------------------



class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> ans = new ArrayList();
        if(s == null || s.length() < p.length())  
            return ans;
        
        HashMap<Character, Integer> map = new HashMap();
        int count = 0;
        
        for(int i = 0; i < p.length(); i++)
        {
            char c = p.charAt(i);
            if(map.containsKey(c))
            {
                map.put(c, map.get(c) + 1);
            }
            else{
                map.put(c,1);                
            }
        }
        
        count = map.size();
        int begin = 0;
        int end = 0;
        while(end < s.length())
        {
            char ch = s.charAt(end);
            if(map.containsKey(ch))
            {
                map.put(ch, map.get(ch)-1);
                if(map.get(ch) == 0)
                    count--;
            }
            
            end++;
            
            while(count == 0)
            {
                if(end - begin == p.length())
                    ans.add(begin);
                
                char ch_begin = s.charAt(begin);
                if(map.containsKey(ch_begin))
                {
                    map.put(ch_begin, map.get(ch_begin)+1);
                    if(map.get(ch_begin) > 0)
                        count++;
                }
                
                begin++;
            }
        }
        
        return ans;
        
    }
}