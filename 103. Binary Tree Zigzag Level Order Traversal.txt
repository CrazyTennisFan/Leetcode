Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]



======================================================================================================



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList();
        if (root == null)  return res;
        
        LinkedList<TreeNode>  queue = new LinkedList();
        queue.add(root);
        int size = 1;
        boolean right = false;
        while(!queue.isEmpty())
        {
            int num = size;
            size = 0;
            List<Integer> l = new ArrayList();
            for(int i = 0; i < num; i++)
            {
                TreeNode n = queue.poll();
                if (n.left != null)
                {
                    queue.add(n.left);
                    size++;
                }
                if (n.right != null)
                {
                    queue.add(n.right);
                    size++;
                }
                if (right)
                {
                    l.add(0, n.val);
                }
                else
                {
                    l.add(n.val);
                }
                    
                
            }
            res.add(l);
            right = !right;
        }
        
        return res;
    }
}