Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


---------------------------------------------------------------------------------------------


class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        
        if(nums == null)
            return res;
       
        helper(res, new ArrayList<>(), nums, 0);
        
        return res;
    }
    
    private void helper(List<List<Integer>> list, List<Integer> cur, int[] nums, int index)
    {
        if(cur.size() == nums.length)
        {
            list.add(cur);
            return;
        }
        
        for(int i = 0; i <= cur.size(); i++)
        {            
            List<Integer> newlist = new ArrayList<>(cur);
            newlist.add(i, nums[index]);
            helper(list, newlist , nums, index+1);
        }
    }
}

Note:

Code flow

nums = 1,2,3

index = 0, cur = []
i = 0, newlist = [1]
	index = 1, cur = [1]
	i = 0, newlist = [2, 1]
		index = 2, cur = [2, 1]
		i = 0, newlist = [3, 2, 1]
		i = 1, newlist = [2, 3, 1]
		i = 2, newlist = [2, 1, 3]
	i = 1, newlist = [1, 2]
		index = 2, cur= [1, 2]
		i = 0, newlist = [3, 1, 2]
		i = 1, newlist = [1, 3, 2]
		i = 2, newlist = [1, 2, 3]