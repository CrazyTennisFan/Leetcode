You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7


--------------------------------------------------------------------------------------------------------



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer>  s1 = new Stack();
        Stack<Integer>  s2 = new Stack();
        int carry = 0;
        ListNode t = l1;
        while(t!=null)
        {
            s1.push(t.val);
            t = t.next;
        }
        
        t = l2;
        while(t!=null)
        {
            s2.push(t.val);
            t = t.next;
        }
        
        ListNode dummyNode = new ListNode(0);
        
        while(s1.size() > 0 || s2.size() > 0)
        {
            int sum  = 0;
            sum += s1.size()>0?s1.pop():0;
            sum += s2.size()>0?s2.pop():0;
            sum += carry;
            ListNode temp = new ListNode(sum%10);
            carry = sum/10;
            temp.next = dummyNode.next; 
            dummyNode.next = temp;
        }
        
        if (carry == 1)
        {
            ListNode temp = new ListNode(1);
            temp.next = dummyNode.next; 
            dummyNode.next = temp;
        }
 
        return dummyNode.next;
    }
}