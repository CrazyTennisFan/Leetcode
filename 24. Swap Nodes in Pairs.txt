Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.


---------------------------------------------------------------------------------------------------


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        if (head == null)  return head;
        
        ListNode dummyHead = new ListNode(0);
        ListNode curr = dummyHead;
        int len = 0;
        ListNode temp = head;
        while(head!=null)
        {
            if (len%2 == 0)
            {
                head = head.next;
                curr.next = temp;
                temp.next = null;
                len++;
                temp = head;
            }
            else
            {
                head = head.next;
                temp.next = curr.next;
                curr.next = temp;
                len++;
                curr = curr.next.next;
                temp = head;
            }
        }
        
        
        return dummyHead.next;
    }
}