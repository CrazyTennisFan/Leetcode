Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]



--------------------------------------------------------------------------------------------------------


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        if (root == null)  return res;
        
        LinkedList<TreeNode>  queue = new LinkedList();
        queue.add(root);
        int num = 1;
        
        while(!queue.isEmpty())
        {
            int size = num;
            num = 0;
            List<Integer> list = new ArrayList();
            for(int i = 0; i < size; i++)
            {
                TreeNode node = queue.poll();
                if (node.left != null)
                {
                    queue.add(node.left);
                    num++;
                }
                if (node.right != null)
                {
                    queue.add(node.right);
                    num++;
                }
                
                list.add(node.val);
            }
            
            res.add(list);
        }
        
        return res;
        
    }
}