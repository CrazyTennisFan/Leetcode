Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].


----------------------------------------------------------------------------------------


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer>  res = new ArrayList();
        
        if (root == null)  return res;
        LinkedList<TreeNode>  queue = new LinkedList();
        queue.add(root);
        int size = 1;
        int num = 0;
        while(!queue.isEmpty())
        {
            num = size;
            size = 0;            
            for(int i = 0; i < num; i++)
            {
                TreeNode node = queue.poll();
                if (node.left != null)
                {
                    queue.add(node.left);
                    size++;
                }
                if (node.right != null)
                {
                    queue.add(node.right);
                    size++;
                }
                if (i == num-1)
                    res.add(node.val);
            }
        }
    
        return res;
    }
}