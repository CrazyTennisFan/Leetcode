Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:
Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:
Input: [1,2,2,3,1,4,2]
Output: 6
Note:

nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999.


--------------------------------------------------------------------------------------------


class Solution {
    public int findShortestSubArray(int[] nums) {
        HashMap<Integer, List<Integer>> map = new HashMap();
        List<Integer> max = new ArrayList();
        int degree = 0;
        
        for(int i =0; i<nums.length;i++)
        {
            if(map.containsKey(nums[i]))
            {
                
                map.get(nums[i]).add(i);
            }
            else
            {
                List<Integer> l = new ArrayList();
                l.add(i);
                map.put(nums[i], l);
            }
            degree = Math.max(degree, map.get(nums[i]).size());
        }
                           
        System.out.println(degree);     
        int min = Integer.MAX_VALUE;
        
        for(int x : map.keySet())
        {
            List<Integer> l = map.get(x);
            if(l.size() == degree)
            {
                min = Math.min(min, l.get(l.size()-1)-l.get(0) + 1);
            }
        }
         
        return min;
        
        
    }
}