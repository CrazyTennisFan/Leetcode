Given a string, we can "shift" each of its letter to its successive letter, for example: "abc" -> "bcd". We can keep "shifting" which forms the sequence:

"abc" -> "bcd" -> ... -> "xyz"
Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.

For example, given: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"], 
A solution is:

[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]


--------------------------------------------------------------------------------------------------------


class Solution {
    public List<List<String>> groupStrings(String[] strings) {
        List<List<String>> ans = new ArrayList();
        if(strings == null || strings.length == 0)
            return ans;
        
        HashMap<String, List<String>> map = new HashMap();
        for(String s: strings)
        {
            char[] arr = s.toCharArray();
            update(arr);
            String t = String.valueOf(arr);
            if(!map.containsKey(t))
                map.put(t, new ArrayList());
            map.get(t).add(s);
        }
        
        for(String s: map.keySet())
        {
            ans.add(map.get(s));
        }
        
        return ans;
    }
    
    public void update(char[] arr)
    {
       
        if (arr.length == 1)  
        {
            arr[0] = 'a';
            return;
        }
        
        int diff = arr[0] - 'a';
        
        for(int i = 0; i < arr.length; i++)
        {
            if(arr[i] - diff < 'a')
                arr[i] = (char)(arr[i] - diff + 26);
            else
                arr[i] = (char)(arr[i] - diff);
        }
       
      
        return;
        
    }
}